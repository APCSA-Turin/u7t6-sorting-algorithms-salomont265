package com.example.project.Insertion_Sort;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Scanner;

public class InsertionSort {

    // PART A. implementing insertion sort
    public static int[] insertionSort(int[] elements) {
        int iterations = 0;
        for(int i=1;i<elements.length;i++){
         int current = elements[i];
         int j =i;
         while(j> 0 && current<elements[j-1]){
            iterations++;
             int temp = elements[j-1];
             elements[j] = temp;
             elements[j-1] = current;
             j--;
            
         }
        }
        System.out.println("INSERTION SORT: Number of Loop Iterations: " + iterations);
        
         return elements;
    }

   
    public static int[] selectionSort(int[] elements) {
        int iterations =0;

       for(int i=0;i<elements.length;i++){
        int smallIndex = i;
        int smallest = Integer.MAX_VALUE;
        for(int j= i+1;j<elements.length;j++){
            iterations++;
            if(elements[j] < smallest){
                smallIndex = j;
                smallest = elements[j];
            }
        }
        //swap
        int temp = elements[i];
        elements[i] = smallest;
        elements[smallIndex] = temp;

       }
       System.out.println("SELECTION SORT: Number of Loop Iterations: " + iterations);
      
       
        return elements;
    }

    // PART B. sorting a 1000-word list
    public static ArrayList<String> insertionSortWordList(ArrayList<String> words) {
        int iterations = 0;
        for(int i=1;i<words.size();i++){
            String current = words.get(i);
            int j =i;
            while(j> 0 && (current.compareTo(words.get(j-1)) < 0)){
                String temp = words.get(j-1);
                words.set(j,temp);
                words.set(j-1,current);
                j--;
                iterations++;
               
            }
           }
           System.out.println("INSERTION SORT: Number of Loop Iterations: " + iterations);

        return words;
    }

    public static ArrayList<String> selectionSortWordList(ArrayList<String> words) {
        int iterations = 0;
        for(int i=0;i<words.size();i++){
            int smallIndex = i;
            String smallest = "z";
            for(int j= i;j<words.size();j++){
                iterations++;
                if(words.get(j).compareTo(smallest) < 0){
                    smallIndex = j;
                    smallest = words.get(j);
                }
            }
            //swap
            String temp = words.get(i);
            words.set(i, smallest);
            words.set(smallIndex,temp);
           }
           System.out.println("SELECTION SORT: Number of Loop Iterations: " + iterations);

          
            return words;
    }

    public static ArrayList<String> loadWordsInto(ArrayList<String> wordList) {
        try {
            Scanner input = new Scanner(new File("src/main/java/com/example/project/Selection_Sort/words.txt"));
            while (input.hasNext()) {
                String word = input.next();
                wordList.add(word);
            }
        } catch (IOException e) {
            System.out.println(e.getMessage());
        }
        return wordList;
    }
     public static void main(String[] args) {
        int[] arrA = {604,832,863,122,332,76,497,979,797,290,741,440,566,406,257,829,113,411,772,584,530,349,151,600,816,171,318,254,969,266,893,315,1000,526,133,541,750,244,614,762,265,696,847,13,260,292,647,93,508,174,67,23,903,490,376,337,344,704,427,646,470,150,942,165,963,503,558,818,84,204,514,296,698,901,784,774,993,62,681,627,757,858,892,769,10,129,377,895,111,234,679,837,827,35,577,911,824,800,276,785,324,453,501,64,452,396,387,855,953,369,996,835,523,954,817,652,575,97,271,361,861,69,809,51,736,364,596,468,141,245,362,26,412,213,499,930,882,32,656,334,295,135,424,754,929,455,107,47,255,821,528,14,444,588,659,421,231,194,148,561,998,378,707,59,520,811,218,249,926,710,410,805,585,937,459,91,94,373,253,211,398,888,887,436,843,760,507,958,606,386,409,272,264,96,529,314,277,284,697,121,928,360,220,638,563,142,601,180,612,433,205,833,350,819,521,5,873,717,338,663,559,283,190,576,569,243,393,372,140,114,967,991,306,44,300,877,637,844,223,667,308,573,487,634,56,282,662,941,947,581,447,496,331,641,671,933,143,825,651,951,743,303,595,240,669,464,144,738,599,370,222,33,326,294,73,820,680,251,307,289,110,212,771,108,422,435,320,787,890,3,752,178,780,658,161,988,753,792,319,74,898,540,734,95,83,768,119,390,477,454,957,345,593,286,1,642,916,869,609,513,851,756,724,522,891,670,798,949,512,678,983,657,586,853,511,169,474,628,635,848,408,845,192,567,555,668,329,823,279,450,548,615,992,379,719,154,764,773,527,761,492,34,578,448,619,70,579,804,626,915,241,461,356,712,446,948,313,946,978,198,574,695,8,495,504,924,41,590,197,801,776,172,363,623,381,156,184,27,246,416,237,839,30,621,896,544,29,722,683,339,959,684,437,382,899,391,147,445,325,905,239,120,883,783,884,493,562,365,519,545,267,661,716,782,45,972,352,889,755,989,532,88,66,375,617,592,20,136,498,109,990,11,720,583,138,291,537,392,273,517,687,849,384,902,430,688,400,751,103,962,15,82,413,645,17,188,340,252,865,850,672,232,995,248,690,432,557,565,335,611,426,629,866,879,502,610,702,546,554,451,479,193,443,961,158,640,216,185,71,488,214,739,92,61,673,160,12,209,394,624,812,746,966,78,196,932,127,155,552,170,770,357,571,465,87,24,462,935,602,767,404,115,297,152,732,6,726,709,139,98,603,999,693,968,414,700,875,206,330,836,281,124,539,54,934,938,201,862,589,348,676,347,500,175,881,259,21,921,428,359,904,449,975,173,944,157,227,876,779,620,631,105,815,328,714,333,81,351,994,471,980,689,729,790,482,22,229,802,485,417,90,867,55,278,137,808,553,765,7,857,977,261,128,18,666,518,654,775,250,856,228,940,208,703,648,613,952,40,191,4,598,917,956,749,927,374,202,725,270,813,973,236,317,368,298,682,476,475,871,854,515,134,880,99,207,607,403,660,168,878,923,506,686,706,711,982,796,323,912,731,807,616,327,304,840,226,31,894,580,826,864,106,481,53,399,288,740,72,101,910,906,691,100,268,199,744,868,221,618,58,112,632,846,636,723,309,831,302,86,931,247,215,310,788,551,633,179,407,727,25,126,269,985,925,945,164,80,466,653,914,874,735,235,564,258,478,777,664,312,425,766,46,834,57,203,692,608,694,970,655,219,263,419,986,872,747,43,274,385,665,16,791,745,483,639,200,649,401,397,950,49,38,974,708,311,77,591,886,582,510,810,885,85,786,299,285,117,28,643,262,897,789,587,346,494,60,50,976,531,781,371,859,572,37,159,830,997,75,650,524,860,814,919,806,418,275,439,625,870,52,118,841,913,39,458,491,242,538,102,981,939,486,918,65,525,675,936,852,463,217,146,568,187,543,484,389,922,162,420,149,758,713,434,718,353,42,509,230,677,9,480,644,131,210,763,322,442,301,256,516,793,166,423,405,415,305,431,472,123,182,556,984,293,183,321,402,920,19,909,701,343,89,794,549,36,778,438,550,116,2,987,838,535,233,943,467,536,705,971,908,570,960,748,68,803,358,79,125,167,63,742,822,176,388,238,224,366,367,594,153,429,132,354,457,533,195,355,316,605,130,489,341,336,469,163,186,795,395,460,189,759,280,733,145,842,737,828,730,674,597,287,965,900,721,907,177,534,225,473,630,441,560,622,505,181,456,715,104,685,728,547,542,342,383,699,48,799,955,380,964};
InsertionSort.selectionSort(arrA);
System.out.println(Arrays.toString(arrA));
System.out.println();
        int[] arrB = {604,832,863,122,332,76,497,979,797,290,741,440,566,406,257,829,113,411,772,584,530,349,151,600,816,171,318,254,969,266,893,315,1000,526,133,541,750,244,614,762,265,696,847,13,260,292,647,93,508,174,67,23,903,490,376,337,344,704,427,646,470,150,942,165,963,503,558,818,84,204,514,296,698,901,784,774,993,62,681,627,757,858,892,769,10,129,377,895,111,234,679,837,827,35,577,911,824,800,276,785,324,453,501,64,452,396,387,855,953,369,996,835,523,954,817,652,575,97,271,361,861,69,809,51,736,364,596,468,141,245,362,26,412,213,499,930,882,32,656,334,295,135,424,754,929,455,107,47,255,821,528,14,444,588,659,421,231,194,148,561,998,378,707,59,520,811,218,249,926,710,410,805,585,937,459,91,94,373,253,211,398,888,887,436,843,760,507,958,606,386,409,272,264,96,529,314,277,284,697,121,928,360,220,638,563,142,601,180,612,433,205,833,350,819,521,5,873,717,338,663,559,283,190,576,569,243,393,372,140,114,967,991,306,44,300,877,637,844,223,667,308,573,487,634,56,282,662,941,947,581,447,496,331,641,671,933,143,825,651,951,743,303,595,240,669,464,144,738,599,370,222,33,326,294,73,820,680,251,307,289,110,212,771,108,422,435,320,787,890,3,752,178,780,658,161,988,753,792,319,74,898,540,734,95,83,768,119,390,477,454,957,345,593,286,1,642,916,869,609,513,851,756,724,522,891,670,798,949,512,678,983,657,586,853,511,169,474,628,635,848,408,845,192,567,555,668,329,823,279,450,548,615,992,379,719,154,764,773,527,761,492,34,578,448,619,70,579,804,626,915,241,461,356,712,446,948,313,946,978,198,574,695,8,495,504,924,41,590,197,801,776,172,363,623,381,156,184,27,246,416,237,839,30,621,896,544,29,722,683,339,959,684,437,382,899,391,147,445,325,905,239,120,883,783,884,493,562,365,519,545,267,661,716,782,45,972,352,889,755,989,532,88,66,375,617,592,20,136,498,109,990,11,720,583,138,291,537,392,273,517,687,849,384,902,430,688,400,751,103,962,15,82,413,645,17,188,340,252,865,850,672,232,995,248,690,432,557,565,335,611,426,629,866,879,502,610,702,546,554,451,479,193,443,961,158,640,216,185,71,488,214,739,92,61,673,160,12,209,394,624,812,746,966,78,196,932,127,155,552,170,770,357,571,465,87,24,462,935,602,767,404,115,297,152,732,6,726,709,139,98,603,999,693,968,414,700,875,206,330,836,281,124,539,54,934,938,201,862,589,348,676,347,500,175,881,259,21,921,428,359,904,449,975,173,944,157,227,876,779,620,631,105,815,328,714,333,81,351,994,471,980,689,729,790,482,22,229,802,485,417,90,867,55,278,137,808,553,765,7,857,977,261,128,18,666,518,654,775,250,856,228,940,208,703,648,613,952,40,191,4,598,917,956,749,927,374,202,725,270,813,973,236,317,368,298,682,476,475,871,854,515,134,880,99,207,607,403,660,168,878,923,506,686,706,711,982,796,323,912,731,807,616,327,304,840,226,31,894,580,826,864,106,481,53,399,288,740,72,101,910,906,691,100,268,199,744,868,221,618,58,112,632,846,636,723,309,831,302,86,931,247,215,310,788,551,633,179,407,727,25,126,269,985,925,945,164,80,466,653,914,874,735,235,564,258,478,777,664,312,425,766,46,834,57,203,692,608,694,970,655,219,263,419,986,872,747,43,274,385,665,16,791,745,483,639,200,649,401,397,950,49,38,974,708,311,77,591,886,582,510,810,885,85,786,299,285,117,28,643,262,897,789,587,346,494,60,50,976,531,781,371,859,572,37,159,830,997,75,650,524,860,814,919,806,418,275,439,625,870,52,118,841,913,39,458,491,242,538,102,981,939,486,918,65,525,675,936,852,463,217,146,568,187,543,484,389,922,162,420,149,758,713,434,718,353,42,509,230,677,9,480,644,131,210,763,322,442,301,256,516,793,166,423,405,415,305,431,472,123,182,556,984,293,183,321,402,920,19,909,701,343,89,794,549,36,778,438,550,116,2,987,838,535,233,943,467,536,705,971,908,570,960,748,68,803,358,79,125,167,63,742,822,176,388,238,224,366,367,594,153,429,132,354,457,533,195,355,316,605,130,489,341,336,469,163,186,795,395,460,189,759,280,733,145,842,737,828,730,674,597,287,965,900,721,907,177,534,225,473,630,441,560,622,505,181,456,715,104,685,728,547,542,342,383,699,48,799,955,380,964};
InsertionSort.insertionSort(arrB);
System.out.println(Arrays.toString(arrB));

    }


}